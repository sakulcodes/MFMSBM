#' @examples
#'
CDMFM_new <- function(data, data1, niterations, beta.a, beta.b, GAMMA, LAMBDA, initNClusters)
{
n = dim(data)[1]
#precomputation for prespecified coefficient VN
lambda <- LAMBDA
gamma <- GAMMA
N=n ## n is the number of oberservations
VN<-0
tmax = n+10
for (t in 1:tmax)
{
r = log(0)
for (k in t:500)
{
b = sum(log((k-t+1):k))-sum(log((k*gamma):(k*gamma+N-1))) + dpois(k-1, lambda, log = TRUE)
m = max(b,r)
r = log(exp(r-m) + exp(b-m)) + m
}
VN[t] = r
}
# initialization of clustering configuration
clusterAssign <- c(sample(1:initNClusters, size = initNClusters, replace = FALSE),
sample(1:initNClusters, size = n-initNClusters, replace = TRUE))
Q<-matrix(0, initNClusters,initNClusters)
for (i in 1:initNClusters){
for (j in i:initNClusters){
Q[i,j] = rbeta(1,beta.a,beta.b)
Q[j,i] = Q[i,j]
}
}
History <- vector("list", niterations)
##start Gibb's sampling
for (iter in 1:niterations)
{
## update z ##
clusterSizes = table(as.factor(clusterAssign))
nClusters = length(clusterSizes)
for (i in 1:n)
{ #determine whether ith component is a singleton
cur.cluster.i = clusterAssign[i]
if (clusterSizes[clusterAssign[i]] > 1){
# not a singleton, have |C|+1 choices
c.counts.noi = clusterSizes  #c.counts.noi corresponds to |C|
c.counts.noi[clusterAssign[i]] = c.counts.noi[clusterAssign[i]] - 1
#finding the probs for sampling process
clusterProbs = sapply(1:nClusters, function(x) {
clusterAssign_temp = clusterAssign
clusterAssign_temp[i] = x
(GAMMA+c.counts.noi[x])*exp(loglike(clusterAssign_temp,Q,data,i,n))
})
clusterAssign_1 = clusterAssign
clusterAssign_1[i] = nClusters+1
clusterProbs[nClusters+1]<-GAMMA*exp(logmargs(clusterAssign_1,data,i,beta.a,beta.b))*exp(VN[nClusters+1]-VN[nClusters])
#choose the cluster number for ith observation
cluster.i <- sample(1:(nClusters+1), size = 1,
prob = clusterProbs)
clusterAssign[i] <- cluster.i
if (cluster.i > nClusters)
{
QQ = matrix(0,nClusters+1,nClusters+1)
QQ[1:nClusters,1:nClusters] = Q
QQ[nClusters+1,1:(nClusters+1)] = rbeta(nClusters+1,beta.a,beta.b)
QQ[1:(nClusters+1),nClusters+1] = QQ[nClusters+1,1:(nClusters+1)]
Q = QQ
clusterSizes <- table(as.factor(clusterAssign)) # sorts according to labels
nClusters <- length(clusterSizes)} else
{Q = Q
clusterSizes <- table(as.factor(clusterAssign))
nClusters <- length(clusterSizes)}
} else {
# a singleton, have |C| choices
c.counts.noi = clusterSizes
c.counts.noi[clusterAssign[i]] = c.counts.noi[clusterAssign[i]] - 1 - GAMMA# can offset the gamma adding later
#finding the probs for sampling process
clusterProbs = sapply(1:nClusters, function(x) {
clusterAssign_temp = clusterAssign
clusterAssign_temp[i] = x
(GAMMA+c.counts.noi[x])*exp(loglike(clusterAssign_temp,Q,data,i,n))
})
clusterAssign_1 = clusterAssign
clusterAssign_1[i] = nClusters+1
clusterProbs[nClusters+1]<-GAMMA*exp(logmargs(clusterAssign_1,data,i,beta.a,beta.b))*exp(VN[nClusters]-VN[nClusters-1])
#choose the cluster number for ith observation
cluster.i <- sample(1:(nClusters+1), size = 1,
prob = clusterProbs)
# remove the empty cluster
if (cluster.i > nClusters)
{      clusterAssign[i] <- cur.cluster.i #put the new cluster in the place of the only singleten one
clusterSizes <- table(as.factor(clusterAssign)) # sorts according to labels
} else
{
clusterAssign[i] <- cluster.i
clusterAssign <- ifelse(clusterAssign > cur.cluster.i, clusterAssign-1, clusterAssign) # to delete the previous group index
clusterSizes <- table(as.factor(clusterAssign))
nClusters <- length(clusterSizes)
if (nClusters > 1) {Q = Q[-cur.cluster.i,][,-cur.cluster.i]} else {Q = Q[-cur.cluster.i,][-cur.cluster.i]}}
}
}
# end for loop over subjects i
## update Q ##
Q = matrix(0, nClusters,nClusters)
AA = matrix(0,nClusters,nClusters)
NN = matrix(0,nClusters,nClusters)
for (r in 1:nClusters){
for (s in r:nClusters)
{
AA[r,s] = sum(data1[clusterAssign==r,clusterAssign==s]) + sum(data1[clusterAssign==s,clusterAssign==r]) - (r==s)*sum(data1[clusterAssign==s,clusterAssign==r])
med = matrix(0,n,n)
med[which(clusterAssign==r),which(clusterAssign==s)] = 1
med1 = matrix(0,n,n)
med1[which(clusterAssign==s),which(clusterAssign==r)] = 1
NN[r,s] = sum(med*lower.tri(med)) + sum(med1*lower.tri(med1))-(r==s)*sum(med1*lower.tri(med1))
Q[r,s] = rbeta(1,AA[r,s]+beta.a,NN[r,s]-AA[r,s]+beta.b)
Q[s,r] = Q[r,s]
}
}
History[[iter]] <- list(zout = clusterAssign,Qout = Q)
cat(" iteration:", iter,"\n",clusterAssign,"\n")
}# for loop over iterations
list(Iterates = History)
}
#################################GET_DAHL_FUNCTION################################################################################
#' Dahl's method to summarize the samples from the MCMC
#'
#' @param MFMfit the result from CDMFM_new function
#' @param burn the number of burn-in interations
#'
#' @return zout = estimated clustering configuration, a n by 1 vector
#' @return Qout = estimated probability matrix, a k by k matrix
#' @export
#'
#' @examples
#'
getDahl <- function(MFMfit, burn)
{
iters <- MFMfit$Iterates[-(1:burn)] #defining the iters value
n <- length(iters[[1]][[1]]) #defining the number of iterations
niters <- length(iters)
membershipMatrices <- lapply(iters, function(x){
clusterAssign <- x[[1]]
outer(clusterAssign, clusterAssign, FUN = "==")
})
membershipAverage <- Reduce("+", membershipMatrices)/niters #calculating the average here
SqError <- sapply(membershipMatrices, function(x, av) sum((x - av)^2),
av = membershipAverage)
DahlIndex <- which.min(SqError) #getting the DahlIndex
DahlAns <- iters[[DahlIndex]]
attr(DahlAns, "iterIndex") <- burn + DahlIndex
attr(DahlAns, "burnin") <- burn
DahlAns #the result(i.e the zout and qout)
}
getwd()
setwd("/Users/sakulmahat/Desktop/MFMSBM/R")
getwd()
getwd()
library(MFMSBM)
library(MFMSBM)
?logmargs
?CDMFM_new
usethis::use_data(dolphindata, compress = "xz")
usethis::use_data(dolphindata, compress = "xz")
usethis::use_data(dolphindata.RData, compress = "xz")
getwd()
usethis::use_data(dolphindata, compress = "xz")
usethis::use_data(dolphindata.rda, compress = "xz")
library(MFMSBM)
usethis::use_readme_rmd()
?usethis
?usethis(badge)
use_github_action_check_standard()
usethis::use_github_action_check_standard()
library(usethis)
use_testthat()
use_test()
getwd()
setwd("/Users/sakulmahat/Desktop/MFMSBM/R")
use_test()
library(MFMSBM)
?logmargs
logmargs(c(1,1,1),matrix(data =1:6),nrow=3, ncol = 3),1,3,3)
logmargs(c(1,1,1),matrix(data =1:6,nrow=3, ncol = 3),1,3,3)
logmargs(c(1,1,1),matrix(data =1:12,nrow=3, ncol = 3),1,3,3)
logmargs(c(1,1,1),matrix(data =1:10,nrow=3, ncol = 3),1,3,3)
matrix(data = 1:11, nrow = 3, ncol = 3)
matrix(data = 1:5, nrow = 3, ncol = 3)
matrix(data = 1:11, nrow = 3, ncol = 3)
matrix(data = 1:9, nrow = 3, ncol = 3)
logmargs(c(1,1,1),matrix(data =1:9,nrow=3, ncol = 3),1,3,3)
logmargs(c(1,1,1),matrix(data =1:9,nrow=3, ncol = 3),1,2,3)
logmargs(c(2,2,3),matrix(data =1:9,nrow=3, ncol = 3),1,2,3)
logmargs(c(2,2,4),matrix(data =1:9,nrow=3, ncol = 3),1,2,3)
logmargs(c(1,1,1),matrix(data =1:9,nrow=3, ncol = 3),1,2,3)
logmargs(c(100,100,100),matrix(data =1:9,nrow=3, ncol = 3),5,4,4)
logmargs(c(8,8,8),matrix(data =1:9,nrow=3, ncol = 3),5,4,4)
logmargs(c(8,8,8),matrix(data =1:9,nrow=3, ncol = 3),3,4,4)
loglike?
2
loglike
loglike?
2
?getDahl
?loglike
?loglike
loglike(c(1,1,1),matrix(data = 1:10, nrow = 5, ncol = 5,4,2))
loglike(c(1,1,1),matrix(data = 1:10, nrow = 5, ncol = 5),4,2))
loglike(c(1,1,1),matrix(data = 1:10, nrow = 5, ncol = 5),4,2)
matrix(data = 1:10, nrow = 5 , ncol = 5)
matrix(data = 1:25, nrow = 5 , ncol = 5)
loglike
loglike(c(2,3,4),matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9),nrow=3,ncol=3),2,4)
loglike(c(2,3,4),matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9),nrow=3,ncol=3,2,4)
loglike(c(2,3,4),matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9,nrow=3,ncol=3),2,4)
loglike(c(2,3,4),matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9),nrow=3,ncol=3,1,1)
loglike(c(2,3,4),matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9,nrow=3,ncol=3),1,1)
loglike(c(1,1,1),matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9,nrow=3,ncol=3),2,2)
loglike(c(5,5,5),matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9,nrow=3,ncol=3),1,1)
loglike(c(5,5,5),matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9,nrow=3,ncol=3),4,5)
loglike(c(5,5,5),matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9,nrow=3,ncol=3),4,4)
loglike(c(5,5,5),matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9,nrow=3,ncol=3),2,3)
loglike(c(5,5,5),matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9,nrow=3,ncol=3),2,3)
?CDMFM_new
CDMFM_new(matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9),nrow=3,ncol=3),2,3,3,3,3,1,2)
CDMFM_new(matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9,nrow=3,ncol=3),2,3,3,3,3,1,2)
CDMFM_new(matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9,nrow=3,ncol=3),2,3,3,3,3,1)
CDMFM_new(matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9,nrow=3,ncol=3),2,3,3,3,3,2)
CDMFM_new(matrix(data=1:30,nrow=10,ncol=10),matrix(data=1:9,nrow=3,ncol=3),2,3,3,3,3,2)
CDMFM_new(matrix(data=1:9,nrow=9,ncol=9),matrix(data=1:9,nrow=3,ncol=3),2,3,3,3,3,1,2)
CDMFM_new(matrix(data=1:9,nrow=9,ncol=9),matrix(data=1:9,nrow=3,ncol=3),2,3,3,3,3,1)
getD
getDahl?
2
getDahl?
2
getDahl(2,2)
CDMFM_new(matrix(data=1:9,nrow=9,ncol=9),matrix(data=1:9,nrow=3,ncol=3),1,1,1,1,1)
CDMFM_new(matrix(data=1:9,nrow=9,ncol=9),matrix(data=1:9,nrow=3,ncol=3),1,1,1,1,1,1)
A <- matrix(0,n,n)
n <- 10
A <- matrix(0,n,n)
A
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 100, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
source("MFMSBM.R")
n <- 2
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 100, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
A
AAA
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
CDMFM_new(data = A, data1 = AAA, niterations = 100, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
n
CDMFM_new(data = A, data1 = AAA, niterations = , beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
CDMFM_new(data = A, data1 = AAA, niterations = 1 , beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
source("MFMSBM.R")
n <- 2
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 1 , beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
source("MFMSBM.R")
n <- 2
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 1 , beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
source("MFMSBM.R")
n <- 2
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 2 , beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
source("MFMSBM.R")
n <- 100
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 100, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
source("MFMSBM.R")
n <- 1
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
source("MFMSBM.R")
n <- 2
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
source("MFMSBM.R")
n <- 100
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
source("MFMSBM.R")
n <- 100
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
source("MFMSBM.R")
n <- 100
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit <- CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
fit
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit1 <- CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
result1 = getDahl(fit1, burn = 50)
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit1 <- CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
result1 = getDahl(fit1, burn = 1)
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit1 <- CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 9)
fit1
library(MFMSBM)
?logmargs
?CDMFM_new
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit1 <- CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit1 <- CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
getDahl(fit1,2)
getDahl(fit1,3)
getDahl(fit1,4)
getDahl(fit1,5)
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit1 <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
getDahl(fit1,1)
getDahl
getDahl(fit1,1)
matrix(data=0.02431389,nrow = 1,ncol=1)
library(MFMSBM)
?getDahl
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit1 <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
test_that("getDahl function works", {
expect_equal(getDahl(fit1,1)$zout, c(1,1,1,1,1,1,1,1,1))
expect_equal(getDahl(fit1,1)$Qout, matrix(data=0.02431389,nrow = 1,ncol=1))
})
library(usethis)
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit1 <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
test_that("getDahl function works", {
expect_equal(getDahl(fit1,1)$zout, c(1,1,1,1,1,1,1,1,1))
expect_equal(getDahl(fit1,1)$Qout, matrix(data=0.02431389,nrow = 1,ncol=1))
})
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit1 <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
getDahl(fit1,1)$zout
getDahl(fit1,1)$Qout
getDahl(fit1,1)$Qout
getDahl(fit1,1)$Qout
getDahl(fit1,1)$Qout
getDahl(fit1,1)$Qout
getDahl(fit1,1)$Qout
getDahl(fit1,1)$Qout
getDahl(fit1,1)$Qout
getDahl(fit1,1)$Qout
getDahl(fit1,1)$Qout
getDahl(fit1,1)$Qout
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit1 <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
getDahl(fit1,1)$zout
getDahl(fit1,1)$Qout
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit1 <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
getDahl(fit1,1)$zout
getDahl(fit1,1)$Qout
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
fit1 <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
getDahl(fit1,1)$zout
getDahl(fit1,1)$Qout
fit1
git1$zout
fit1$zout
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
#getDahl(fit1,1)$zout
#getDahl(fit1,1)$Qout
CDMFM_new
CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
a <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
#getDahl(fit1,1)$zout
#getDahl(fit1,1)$Qout
a
a$zout
a$Iterates
a$Iterates$zout
a
a
a$Iterates[[1]]$zout
a$Iterates[[2]]$zout
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
a <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
#getDahl(fit1,1)$zout
#getDahl(fit1,1)$Qout
a$Iterates[[2]]$zout
a$Iterates[[2]]$zout
a$Iterates[[2]]$zout
a$Iterates[[2]]$zout
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
a <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
#getDahl(fit1,1)$zout
#getDahl(fit1,1)$Qout
a$Iterates[[1]]$zout
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
a <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
#getDahl(fit1,1)$zout
#getDahl(fit1,1)$Qout
a$Iterates[[1]]$zout
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
a <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
#getDahl(fit1,1)$zout
#getDahl(fit1,1)$Qout
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
a <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
#getDahl(fit1,1)$zout
#getDahl(fit1,1)$Qout
expect_equal(CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)$zout, c(1,1,1,1,1,1,1,1,1))
test_that("CDMFM_new function works", {
expect_equal(CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)$zout, c(1,1,1,1,1,1,1,1,1))
})
#######################################Testing_logmargs_function#######################################
test_that("logmargs function works", {
cluster
expect_equal(logmargs(c(2,2,3),matrix(data =1:9,nrow=3, ncol = 3),1,2,3), Inf)
expect_equal(logmargs(c(2,2,4),matrix(data =1:9,nrow=3, ncol = 3),1,2,3), Inf)
expect_equal(logmargs(c(2,2,4),matrix(data =1:9,nrow=3, ncol = 3),1,2,3), NaN)
expect_equal(logmargs(c(8,8,8),matrix(data =1:9,nrow=3, ncol = 3),3,4,4), 0)
})
source("MFMSBM.R")
n <- 10
A <- matrix(0,n,n)
AAA <- matrix(0,n,n)
a <- CDMFM_new(data = A, data1 = AAA, niterations = 2, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)
#getDahl(fit1,1)$zout
#getDahl(fit1,1)$Qout
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)$zout
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)$Iterates[[1]]$zout
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)$zout
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)$zout
library(MFMSBM)
loglike(c(2,3,4),matrix(data=1:25,nrow=5,ncol=5),matrix(data=1:9,nrow=3,ncol=3),1,1)
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)$zout
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)$zout[1]
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)$Iterates[[1]]
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)$Iterates[[1]]$zout
CDMFM_new(data = A, data1 = AAA, niterations = 1, beta.a = 1, beta.b = 1, GAMMA=1, LAMBDA = 1, initNClusters = 1)$Iterates[[1]]$zout[1]
library(MFMSBM)
